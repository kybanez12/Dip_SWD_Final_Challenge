/*
Deployment script for TeamYaoDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TeamYaoDB"
:setvar DefaultFilePrefix "TeamYaoDB"
:setvar DefaultDataPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT\TeamYaoDB"
:setvar DefaultLogPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT\TeamYaoDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The type for column Email in table [dbo].[Member] is currently  NVARCHAR (100) NOT NULL but is being changed to  NVARCHAR (20) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Member])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column Payer in table [dbo].[Payment] is currently  NVARCHAR (100) NOT NULL but is being changed to  NVARCHAR (20) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Payment])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[FK_GAME]...';


GO
ALTER TABLE [dbo].[Payment] DROP CONSTRAINT [FK_GAME];


GO
PRINT N'Starting rebuilding table [dbo].[Member]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Member] (
    [Email] NVARCHAR (20) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_MEM1] PRIMARY KEY CLUSTERED ([Email] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Member])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Member] ([Email])
        SELECT   [Email]
        FROM     [dbo].[Member]
        ORDER BY [Email] ASC;
    END

DROP TABLE [dbo].[Member];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Member]', N'Member';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_MEM1]', N'PK_MEM', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Payment]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Payment] (
    [GameID] INT           NOT NULL,
    [Payer]  NVARCHAR (20) NOT NULL,
    [Amount] NVARCHAR (50) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_PAY1] PRIMARY KEY CLUSTERED ([GameID] ASC, [Payer] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Payment])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Payment] ([GameID], [Payer], [Amount])
        SELECT   [GameID],
                 [Payer],
                 [Amount]
        FROM     [dbo].[Payment]
        ORDER BY [GameID] ASC, [Payer] ASC;
    END

DROP TABLE [dbo].[Payment];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Payment]', N'Payment';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_PAY1]', N'PK_PAY', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_GAME]...';


GO
ALTER TABLE [dbo].[Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_GAME] FOREIGN KEY ([GameID]) REFERENCES [dbo].[Fixture] ([FixtureId]);


GO
PRINT N'Creating [dbo].[FK_PAYER]...';


GO
ALTER TABLE [dbo].[Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_PAYER] FOREIGN KEY ([Payer]) REFERENCES [dbo].[Member] ([Email]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Payment] WITH CHECK CHECK CONSTRAINT [FK_GAME];

ALTER TABLE [dbo].[Payment] WITH CHECK CHECK CONSTRAINT [FK_PAYER];


GO
PRINT N'Update complete.';


GO
